from random import randint, sample
import random, os


# dorobic specjalne soptkanie w lokacjach, skrzynie itp
# generator przedmiotow z ktorego moglby korzystac sklep
# przedmioty moga byc opakowane w cene przez inna klase
# klasy lokacje maja zostawiac stringi(zapis np ile razy tu byl gracz)

class Przedmiot(object):

	def nazwa(self, odmiana):
		return self.przypadek[odmiana]
		
class Bron(Przedmiot):
	typ = 'bron'
	def wylicz_obrazenia(self, atakujacy, atakowany):
		return (atakujacy.sila + randint(self.obr_min, self.obr_max)) - self.mnoznik*atakowany.pancerz

class Mikstura(Przedmiot):
	przypadek = dict (
				mianownik = 'mikstura',
				dopelniacz = 'mikstury',
				narzednik = 'mikstura',
				)
	typ = 'mikstura'				
	cena = 75
	
class Miecz(Bron):
	przypadek = dict (
		mianownik = 'miecz',
		dopelniacz = 'miecza',
		narzednik = 'mieczem',
	)
	obr_min = 2
	obr_max = 6
	mnoznik = 0.5
	cena = 50

class TepyMiecz(Miecz):
	przypadek = dict (
		mianownik = 'tepy miecz',
		dopelniacz = 'tepego miecza',
		narzednik = 'tepym mieczem',
	)
	mnoznik = 1
	cena = 30
	
class DobryMiecz(Miecz):
	przypadek = dict (
		mianownik = 'dobry miecz',
		dopelniacz = 'dobrego miecza',
		narzednik = 'dobrym mieczem',
	)
	obr_min = 4
	obr_max = 8
	cena = 200
	
class Szczeki(Bron):
	przypadek = dict(
			mianownik = 'szczeki',
			dopelniacz = 'szczek',
			narzednik = 'szczekami',
			)
	obr_min = 1
	obr_max = 9
	mnoznik = 1
					
class MlotBojowy(Bron):
	przypadek = dict (
		mianownik = 'mlot',
		dopelniacz = 'mlota',
		narzednik = 'mlotem',
	)
	obr_min = 3
	obr_max = 5
	mnoznik = 0.5
	cena = 50

class LekkiMlot(MlotBojowy):
	przypadek = dict (
		mianownik = 'lekki mlot',
		dopelniacz = 'lekkiego mlota',
		narzednik = 'lekkim mlotem',
	)
	obr_min = 3
	obr_max = 5
	mnoznik = 1
	cena = 50
	
class DobryMlotBojowy(MlotBojowy):
	przypadek = dict (
		mianownik = 'dobry mlot',
		dopelniacz = 'dobrego mlota',
		narzednik = 'dobrym mlotem',
	)
	obr_min = 4
	mnoznik = 0
	cena = 200
	
class Topor(Bron):
	przypadek = dict (
			mianownik = 'topor',
			dopelniacz = 'topora',
			narzednik = 'toporem',
			)
	obr_min = 1
	obr_max = 7
	mnoznik = 0.5
	cena = 60
	
class LekkiTopor(Topor):
	przypadek = dict (
			mianownik = 'lekki topor',
			dopelniacz = 'lekkiego topora',
			narzednik = 'lekkim toporem',
			)
	obr_min = 1
	obr_max = 5
	mnoznik = 0.5
	cena = 40
	
class DobryTopor(Topor):
	przypadek = dict (
			mianownik = 'dobry topor',
			dopelniacz = 'dobrego topora',
			narzednik = 'dobrym toporem',
			)
	obr_min = 1
	obr_max = 9
	mnoznik = 0.2
	cena = 220
	
class Palka(Bron):
	przypadek = dict (
		mianownik = 'palka',
		dopelniacz = 'palki',
		narzednik = 'palka',
		)	
	obr_min = 1
	obr_max = 4
	mnoznik = 1.5
	cena = 10
	
class Kij(Palka):
	przypadek = dict (
		mianownik = 'kij',
		dopelniacz = 'kija',
		narzednik = 'kijem',
		)
	obr_min = 2
	cena = 15
	
class Pazury(Bron):
	przypadek = dict(
			mianownik = 'pazury',
			dopelniacz = u'pazurow',
			narzednik = 'pazurami',
		),
	obr_min = 10
	obr_max = 25
	mnoznik = 1	

class GeneratorPrzedmiotow(object):
	dostepne_przedmioty =[
		Mikstura(),
		Palka(),
		Kij(),
		TepyMiecz(),
		LekkiMlot(),
		LekkiTopor(),
		Miecz(),
		MlotBojowy(),
		Topor(),
		DobryMiecz(),
		DobryMlotBojowy(),
		DobryTopor(),
		
	]
	
	def losuj_przedmioty(self, wlasciciel, poziom, lb_przedmiotow):
		if poziom > (len(self.dostepne_przedmioty) - 1):
			poziom = len(self.dostepne_przedmioty) - 1
		dostepne_przedm = []
		for index in range(0, poziom):
			dostepne_przedm.append(self.dostepne_przedmioty[index])
		for index in range(0, lb_przedmiotow):
			przedmiot = sample(dostepne_przedm, 1)[0]
			wlasciciel.ekwipunek.append(przedmiot) 

generator_przedmiotow = GeneratorPrzedmiotow()			
		
class Kontener(object):
	def prezentacja_przedmiotow(self, wlasciciel, modyfikator_ceny):
		wydruk = '%s\n' % wlasciciel.nazwa
		for index, przedmiot in enumerate(wlasciciel.ekwipunek):
			wydruk = wydruk + '%d. %s cena: %d\n' % (index, przedmiot.nazwa('mianownik'), przedmiot.cena/modyfikator_ceny)	
		return wydruk
		
	def dodaj_przedmiot(self, beneficjent, przedmiot):
		beneficjent.ekwipunek.append(przedmiot)
		
	def odejmij_przedmiot(self, wlasciciel, przedmiot):
		wlasciciel.ekwipunek.remove(przedmiot)

kontener = Kontener()		
		
class Istota(object):
	
	def __init__(self, nazwa, sila, pz, bron, zloto, pancerz):
		self.nazwa = nazwa
		self.sila = sila
		self.pz = pz
		self.bron = bron
		self.zloto = zloto
		self.pancerz = pancerz
		self.ekwipunek = []
		
	def dodaj_pz(self, zmiana_pz):
		self.pz = self.pz + zmiana_pz
		
	def odejmij_pz(self, zmiana_pz):
		self.pz = self.pz - zmiana_pz
		
	def czy_zyje(self):
		return self.pz >= 0
		
	def zmiana_broni(self, bron):	
		self.bron = bron
	
	def opis(self):
		return '[%s, pz: %d, bron: %s, zloto: %s]' % (self.nazwa, self.pz, self.bron.nazwa('mianownik'), self.zloto)
			
	def czy_stac(self, kwota_wydatku):
		return self.zloto >= kwota_wydatku
		
	def zarobki(self, dodaj_zloto):
		self.zloto = self.zloto + dodaj_zloto
		
	def wydatki(self, odejmij_zloto):
		self.zloto = self.zloto - odejmij_zloto
						
class Postac(Istota):
	def __init__(self, imie):
		super(Postac, self).__init__(
			nazwa = imie,
			sila = 2,
			pz = 40 + randint(10,15),
			bron = Palka(),
			zloto = 50 + randint(25,50),
			pancerz = 1
			)

gracz = Postac('Rysiu')	


class Potwor(Istota):
	pass
				
class Ork(Potwor):
	def __init__(self):
		super(Ork, self).__init__(
		nazwa = u'Ork', 
		sila = 4,
		pz = 20 + randint(1,10),
		bron = Palka(),
		zloto = 20 + randint(1,30),
		pancerz = 2,
		)
		
class PoteznyOrk(Ork):
	def __init__(self):
		super(PoteznyOrk,self).__init__()
		self.nazwa = 'Potezny Ork'
		self.bron = Palka()
		self.pz = 40
		self.zloto = 40 + randint(1,10)
						
class Goblin(Potwor):
	def __init__(self):
		super(Goblin, self).__init__(
		nazwa = u'Goblin', 
		sila = 2,
		pz = 10 + randint(1,5),
		bron = Palka(),
		zloto = 10 + randint(1,10),
		pancerz = 0
		)
			
class PoteznyGoblin(Goblin):
	def __init__(self):
		super(PoteznyGoblin, self).__init__()
		self.nazwa = u'Potezny Goblin'
		self.sila = 3
		self.pz = 15 + randint(1,10)
		self.zloto = 20 + randint(1,10)
		
class Wilk(Potwor):
	def __init__(self):
		super(Wilk, self).__init__(
		nazwa = 'Wilk',
		sila = 3,
		pz = 15 + randint(1,10),
		bron = Szczeki(),
		zloto = 10 + randint(1,20),
		pancerz = 0,
		)

class WscieklyWilk(Wilk):
	def __init__(self):
		super(WscieklyWilk, self).__init__()
		self.nazwa = 'Zajadly Toczacy Sline Wielki Wsciekly Wilk'
		self.sila = 6
		self.pz = 40 + randint(10,20)
		self.zloto = 30 + randint(10,30)
		
class Ogr(Potwor):
	def __init__(self):
		super(Ogr, self).__init__(
		nazwa = 'Ogr',
		sila = 5,
		pz = 50,
		bron = Palka(),
		zloto = 40 + randint(1,30),
		pancerz = 3
		)
		
class CzarnyRycerz(Potwor):
	def __init__(self):
		super(CzarnyRycerz, self).__init__(
		nazwa = 'Czarny Rycerz',
		sila = 4,
		pz = 50,
		bron = Palka(),
		zloto = 40 + randint(1,30),
		pancerz = 4
		)
				
class WielkiPajak(Potwor):
	def __init__(self):
		
		super(WielkiPajak, self).__init__(
			nazwa = 'Wielki Pajak',
			sila = 6,
			pz = 50 + randint(10,30),
			bron = Szczeki(),
			zloto = randint(0,10),
			pancerz = 3,
			)

class Smok(Potwor):
	def __init__(self):
		super(Smok, self).__init__(
			nazwa = 'Smok',
			sila = 10,
			pz = 100,
			bron = Pazury(),
			zloto = 10,
			pancerz = 10,
			)

class Lokacja(object):
	def __init__(self):
		self.przypadek = dict(
				mianownik = self.przypadki[0],
				dopelniacz = self.przypadki[1],
				narzednik = self.przypadki[2],
			
			)
		self.licznik_wizyt = 1
		
	def opis_ogolny(self):
		return '%s, wizyta nr: %d \n %s' % (self.nazwa('mianownik'), self.licznik_wizyt, self.opis_lokacji)
		
	def nazwa(self, odmiana):
		return self.przypadek[odmiana]
		
	def wejscie(self, wizytator):
		self.licznik_wizyt += 1
			
class Wioska(Lokacja):
	przypadki = ['wioska','wioski','wioska']
	opis_lokacji = 'jestes w wiosce'
	
class Sklep(Lokacja):
	przypadki = ['sklep', 'sklepu', 'sklepem']
	opis_lokacji = 'jestes w sklepie'
		
class Trening(Lokacja):
	przypadki = ['sala treningowa', 'sali treningowej', 'sala treningowa']
	opis_lokacji = 'jestes w treningu'
		
class Las(Lokacja):
	przypadki = ['las', 'lasu', 'lasem']
	opis_lokacji = 'jestes w lesie'
		
class Wieza(Lokacja):
	przypadki = ['wieza', 'wiezy', 'wieza']
	opis_lokacji = 'jestes w wiezy'
	
class Rzeka(Lokacja):
	przypadki = ['rzeka', 'rzeki', 'rzeka']
	opis_lokacji = 'jestes w rzece'

class Legowisko(Lokacja):
	przypadki = ['legowisko smoka', 'legowiska smoka', 'legowiskiem smoka',]
	opis_lokacji = 'legowisko smocze jest ...'
		
class GeneratorWrogow(object):
	wrogowie = [
				dict(
					potwor = Goblin,
					szansa = 20,
					),
				dict(
					potwor = Wilk,
					szansa = 10,
					),	
				dict(
					potwor = Ork,
					szansa = 7,
					),
				dict(
					potwor = PoteznyGoblin,
					szansa = 7,
					),
				dict(
					potwor = PoteznyOrk,
					szansa = 5,
					),
						
				dict(
					potwor = WscieklyWilk,
					szansa = 4,
					),
				dict(
					potwor = WielkiPajak,
					szansa = 3,
					),
				dict(
					potwor = Ogr,
					szansa = 3,
					),
				dict(
					potwor = CzarnyRycerz,
					szansa = 3,
					),
							
					]

	def __init__(self):
		self.szansa = []
		for index, potwor in enumerate(self.wrogowie):
			self.szansa.extend([index] * potwor['szansa'])
		
	def losowanie(self):
		wylosowany = sample(self.szansa, 1)[0]
		wylosowany = wylosowany + self.poziom
		if wylosowany > len(self.wrogowie) - 1:
			wylosowany = len(self.wrogowie) - 1
		klasa_wylooswanego = self.wrogowie[wylosowany]['potwor']
		return klasa_wylooswanego() 

class Walka(object):

	def __init__(self, gracz, wrog):
		self.gracz = gracz
		self.wrog = wrog
		
	def atak(self, atakujacy, atakowany):
		obrazenia = atakujacy.bron.wylicz_obrazenia(atakujacy, atakowany)
		if obrazenia > 0:
			atakowany.odejmij_pz(obrazenia)
			print '%s zadaje %s obrazenia %d ' % (atakujacy.nazwa, atakujacy.bron.nazwa('narzednik'), obrazenia)
		else:
			print 'atak %s nie zadal zadnych obrazen' % atakujacy.nazwa
		raw_input('[enter]')
		
	def silnik_walki(self):
		istota1 = self.gracz
		istota2 = self.wrog
		
		inicjatywa1 = randint(1,1000)
		inicjatywa2 = randint(1,1000)
		if inicjatywa2 > inicjatywa1:
			istota1, istota2 = istota2, istota1
		sila_gracza_bezmodyf, pancerz_gracz_bezmodyf = gracz.sila, gracz.pancerz
		
		while istota1.czy_zyje() and istota2.czy_zyje():
			os.system('clear')
			print 'naprzeciw sobie staja', istota1.opis(), 'oraz: ', istota2.opis()
			print '1. Agresywny tryb walki [atak+50%, obrona-50%] '
			print '2. Defensywny tryb walki [atak-50%, obrona+50%] '
			print '3. Normalny tryb walki'
			print '4. Pije miksture leczenia'
			print '5. Uciekam'
			wybor = raw_input('> ')
			if wybor == '1':
				gracz.sila, gracz.pancerz = gracz.sila*1.5, gracz.pancerz*0.5
				print 'sila gracza', gracz.sila, 'pancerz gracza', gracz.pancerz
			elif wybor == '2':
				gracz.sila, gracz.pancerz = gracz.sila*0.5, gracz.pancerz*1.5
				print 'sila gracza', gracz.sila, 'pancerz gracza', gracz.pancerz
			elif wybor == '4':
				gracz.uzycie_mikstury()
				raw_input('>')
				
			elif wybor == '5':
				print 'tchorzliwie uciekasz z pola walki, najwyrazniej %s to zbyt potezny przeciwnik dla Ciebie' % self.wrog.nazwa
				raw_input('[enter]')	
				return 'ucieczka'
			self.atak(istota1, istota2)
			if istota2.czy_zyje():
				self.atak(istota2, istota1)
			gracz.sila, gracz.pancerz = sila_gracza_bezmodyf, pancerz_gracz_bezmodyf 
		if gracz.czy_zyje():
			print 'gratulacje martwy %s lezy u Twych stop, zdobyles po pokonanym wrogu %s sztuk zlota' % (self.wrog.nazwa, self.wrog.zloto)
			raw_input('[enter]')
			gracz.zarobki(self.wrog.zloto)
			
			gracz.ograb(gracz, self.wrog)
			return 'wygrana'
		else:
			print 'umarles'
			exit(1)	

class GeneratorLokacji(object):
	lokacje = [
		Wioska(),
		Sklep(),
		Trening(),
		Las(),
		Rzeka(),
		Wieza(),
		Legowisko(),
	]	
		
	przejscia = {
		0: [1,2,3],
		1: [0,],
		2: [0,],
		3: [0,4],
		4: [0,3,5],
		5: [4,6],
		6: [],
		
	}
	
	def prezentacja_lokacji(self, nr_lokacji):
		for opcja in self.przejscia[nr_lokacji]:
			print opcja, self.lokacje[opcja].nazwa('mianownik')
			
	def pobierz_lokacje(self, nr_lokacji):
		return self.lokacje[nr_lokacji]
		
class Silnik(object):
	
	def __init__(self, poziom):
		self.poziom = poziom
		self.generator_lokacji = GeneratorLokacji()
		self.sprzedawca = Postac('Sprzedawca')
	def poziom_trudnosci(self, ile):
		self.poziom = self.poziom + ile
		
	def wymiana(self, kupujacy, sprzedajacy, modyfikator_ceny):
		print 'chcesz cos kupic czy sprzedac?[kup/sprzedaj]'
		wybor = raw_input('> ')
		if 'spr' in wybor:
			kupujacy, sprzedajacy = sprzedajacy, kupujacy
			modyfikator_ceny = 3
		while True:
			print kontener.prezentacja_przedmiotow(sprzedajacy, modyfikator_ceny)
			print '%s, zloto: %d' %(gracz.nazwa, gracz.zloto)
			while True:
				try:
					wybor = int(raw_input('wybierz przedmiot[enter - wyjscie]:> '))
					break
				except ValueError:
					return 0
			if wybor in range(0, len(sprzedajacy.ekwipunek)):
				if kupujacy.czy_stac(sprzedajacy.ekwipunek[wybor].cena/modyfikator_ceny):
					print ' gratulacje %s stal sie wlascicielem nowego slicznego %s' % (kupujacy.nazwa, sprzedajacy.ekwipunek[wybor].nazwa('dopelniacz'))
					kontener.dodaj_przedmiot(kupujacy, sprzedajacy.ekwipunek[wybor])
					kupujacy.wydatki(sprzedajacy.ekwipunek[wybor].cena/modyfikator_ceny)
					sprzedajacy.zarobki(sprzedajacy.ekwipunek[wybor].cena/modyfikator_ceny)
					kontener.odejmij_przedmiot(sprzedajacy, sprzedajacy.ekwipunek[wybor])
					

					
				else:
					print 'nie stac cie na wybrany przedmiot'
					break
			else:
				print 'wybierz przedmiot z listy'
	
	def wybor_ekwipunku(self, zmieniajacy):
		kontener.prezentacja_przedmiotow(zmieniajacy, 3)
		print zmieniajacy.opis()
		while True:
			try:
				wybor = int(raw_input('wybierz przedmiot, ktory chcesz zalozyc[enter - wyjscie]'))
				
				break
			except ValueError:
				return 0
		if zmieniajacy.ekwipunek[wybor].typ == 'bron':
			zmieniajacy.ekwipunek.append(zmieniajacy.bron)
			print 'chowasz %s do ekwipunku' % zmieniajacy.bron.nazwa('mianownik')
			zmieniajacy.zmiana_broni(zmieniajacy.ekwipunek[wybor])
			kontener.odejmij_przedmiot(zmieniajacy, zmieniajacy.ekwipunek[wybor])
			print zmieniajacy.opis()
		else:	
			print 'nic nie zmieniles'
		
	def gra(self):
		nr_lokacji = 0
		
		obecnalokacja = self.generator_lokacji.pobierz_lokacje(nr_lokacji)
		while obecnalokacja != self.generator_lokacji.lokacje[-1]:
			print obecnalokacja.opis_ogolny()
			obecnalokacja.wejscie(gracz)
			if obecnalokacja.nazwa('mianownik') == 'sklep':
				generator_przedmiotow.losuj_przedmioty(self.
			
			while True:
				self.generator_lokacji.prezentacja_lokacji(nr_lokacji)
				wybor = int(raw_input('> '))
				if wybor in self.generator_lokacji.przejscia[nr_lokacji]:
					nr_lokacji = wybor
					break
				else:
					print 'wybierz jedna z dostepnych opcji'
			obecnalokacja = self.generator_lokacji.pobierz_lokacje(nr_lokacji)
			
			

gra = Silnik(1)


generator_przedmiotow.losuj_przedmioty(gracz,3,4)

print kontener.prezentacja_przedmiotow(gracz, 4)
gra.wybor_ekwipunku(gracz)
print kontener.prezentacja_przedmiotow(gracz, 3)

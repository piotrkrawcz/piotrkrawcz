from random import randint, sample
import os
# dorobic specjalne soptkanie w lokacjach, skrzynie itp

class Bron(object):
	przypadek = dict (
				mianownik = '....',
				dopelniacz = '....',
				narzednik = ' .... ',
				)

	def nazwa(self, odmiana):
		return self.przypadek[odmiana]
	def wylicz_obrazenia(self, atakujacy, atakowany):
		return (atakujacy.sila + randint(self.obr_min, self.obr_max)) - self.mnoznik*atakowany.pancerz

class Mikstura(object):
	przypadek = dict (
				mianownik = 'mikstura',
				dopelniacz = 'mikstury',
				narzednik = 'mikstura',
				)		
	def nazwa(self, odmiana):
		return self.przypadek[odmiana]
		
class Miecz(Bron):
	przypadek = dict (
		mianownik = 'miecz',
		dopelniacz = 'miecza',
		narzednik = 'mieczem',
	)
	obr_min = 2
	obr_max = 6
	mnoznik = 0.5
	
class DobryMiecz(Miecz):
	przypadek = dict (
		mianownik = 'dobry miecz',
		dopelniacz = 'dobrego miecza',
		narzednik = 'dobrym mieczem',
	)
	obr_min = 4
	obr_max = 8
	
class Szczeki(Bron):
	przypadek = dict(
			mianownik = 'szczeki',
			dopelniacz = 'szczek',
			narzednik = 'szczekami',
			)
	obr_min = 1
	obr_max = 9
	mnoznik = 1
					
class MlotBojowy(Bron):
	przypadek = dict (
		mianownik = 'mlot',
		dopelniacz = 'mlota',
		narzednik = 'mlotem',
	)
	obr_min = 3
	obr_max = 5
	mnoznik = 0.5
		
class DobryMlotBojowy(MlotBojowy):
	przypadek = dict (
		mianownik = 'dobry mlot',
		dopelniacz = 'dobrego mlota',
		narzednik = 'dobrym mlotem',
	)
	obr_min = 4
	mnoznik = 0
				
class Topor(Bron):
	przypadek = dict (
			mianownik = 'topor',
			dopelniacz = 'topora',
			narzednik = 'toporem',
			)
	obr_min = 1
	obr_max = 7
	mnoznik = 0.5
		
class DobryTopor(Topor):
	przypadek = dict (
			mianownik = 'dobry topor',
			dopelniacz = 'dobrego topora',
			narzednik = 'dobrym toporem',
			)
	obr_min = 1
	obr_max = 9
	mnoznik = 0.2
	
class Palka(Bron):
	przypadek = dict (
		mianownik = 'palka',
		dopelniacz = 'palki',
		narzednik = 'palka',
		)	
	obr_min = 1
	obr_max = 4
	mnoznik = 1.5

class Kij(Palka):
	przypadek = dict (
		mianownik = 'kij',
		dopelniacz = 'kija',
		narzednik = 'kijem',
		)
	obr_min = 2

class Pazury(Bron):
	przypadek = dict(
			mianownik = 'pazury',
			dopelniacz = u'pazurow',
			narzednik = 'pazurami',
		),
	obr_min = 10
	obr_max = 25
	mnoznik = 1	

class Kontener(object):
	def __init__(self, iloscsztuk, mnoznik_handlarza):
		self.przedmioty = [
			dict(
				klasa = Palka,
				cena = 10/mnoznik_handlarza,
				ilosc = iloscsztuk,
			),
			dict(
				klasa = Kij,
				cena = 15/mnoznik_handlarza,
				ilosc = iloscsztuk,
			),
			dict(
				klasa = Miecz,
				cena = 50/mnoznik_handlarza,
				ilosc = iloscsztuk,
			),
			dict(
				klasa = MlotBojowy,
				cena = 50/mnoznik_handlarza,
				ilosc = iloscsztuk,
			),
			dict(
				klasa = Topor,
				cena = 60/mnoznik_handlarza,
				ilosc = iloscsztuk,
			),
			dict(
				klasa = DobryMiecz,
				cena = 200/mnoznik_handlarza,
				ilosc = iloscsztuk,
			),
			dict(
				klasa = DobryMlotBojowy,
				cena = 200/mnoznik_handlarza,
				ilosc = iloscsztuk,
			),
			dict(
				klasa = DobryTopor,
				cena = 220/mnoznik_handlarza,
				ilosc = iloscsztuk,
			),
			dict(
				
				klasa = Mikstura,
				cena = 75/mnoznik_handlarza,
				ilosc = iloscsztuk,
			),	
		]
	def prezentacja_towaru(self):
		for nr_przedmiotu in range(0, len(self.przedmioty)):
			if self.przedmioty[nr_przedmiotu]['ilosc'] == 0:
				wyswietlaj = 0
			else:
				wyswietlaj = 1
			bron = self.przedmioty[nr_przedmiotu]['klasa']()	
			print ('%d. %s, wartosc: %s, ilosc sztuk: %d' %(nr_przedmiotu, bron.nazwa('mianownik'), self.przedmioty[nr_przedmiotu]['cena'], self.przedmioty[nr_przedmiotu]['ilosc']))*wyswietlaj
		print '%d. Koniec' % (nr_przedmiotu + 1)
	def czy_stac(self, kwota_wydatku):
		return self.zloto >= kwota_wydatku
		
	def zarobki(self, dodaj_zloto):
		self.zloto = self.zloto + dodaj_zloto
		
	def wydatki(self, odejmij_zloto):
		self.zloto = self.zloto - odejmij_zloto
		
	def dodaj_przedmiot(self, nr_przedmiotu):
		self.przedmioty[nr_przedmiotu]['ilosc'] = self.przedmioty[nr_przedmiotu]['ilosc'] + 1
			
	def zabierz_przedmiot(self, nr_przedmiotu):
		self.przedmioty[nr_przedmiotu]['ilosc'] = self.przedmioty[nr_przedmiotu]['ilosc'] - 1
			
	def wymiana(self, sprzedajacy, kupujacy):
		
		wybor = 0
		while wybor != len(self.przedmioty):
			try:
				sprzedajacy.prezentacja_towaru()
				wybor = int(raw_input('> '))
				if wybor in range(0, len(self.przedmioty)) and kupujacy.czy_stac(self.przedmioty[wybor]['cena']) and sprzedajacy.przedmioty[wybor]['ilosc']>0:
					kupujacy.dodaj_przedmiot(wybor)
					sprzedajacy.zabierz_przedmiot(wybor)
					kupujacy.wydatki(self.przedmioty[wybor]['cena'])
					sprzedajacy.zarobki(self.przedmioty[wybor]['cena'])
					print 'gratuluje udanego zakupu'
				elif kupujacy.czy_stac(self.przedmioty[wybor]['cena'])== False:
					print 'nie stac Cie na wybrany przedmiot'
			except (ValueError, IndexError):
				print 'wybierz jedna z dostepnych opcji'
			
	def ograb(self, ograbiajacy, ograbiany):
		print 'Lista przedmiotow do ograbienia:'
		ograbiany.prezentacja_towaru()
		for nr_przedmiotu in range(0, len(ograbiany.przedmioty)):
			if ograbiany.przedmioty[nr_przedmiotu]['ilosc'] > 0:
				ograbiajacy.dodaj_przedmiot(nr_przedmiotu)
	
class Istota(Kontener):
	
	
	def __init__(self, nazwa, sila, pz, bron, zloto, pancerz):
		super(Istota, self).__init__(
		iloscsztuk = 0,
		mnoznik_handlarza = 4,
		)
		
		self.nazwa = nazwa
		self.sila = sila
		self.pz = pz
		self.bron = bron
		self.zloto = zloto
		self.pancerz = pancerz
		
	def dodaj_pz(self, zmiana_pz):
		self.pz = self.pz + zmiana_pz
		
	def odejmij_pz(self, zmiana_pz):
		self.pz = self.pz - zmiana_pz
		
	def czy_zyje(self):
		return self.pz >= 0
		
	def zmiana_broni(self, bron):	
		self.bron = bron
	
	def pobranie_broni_z_ekwipunku(self):
		wybor = 0
		while wybor != len(self.przedmioty):
			try:
				self.prezentacja_towaru()
				wybor = int(raw_input('> '))
				if self.przedmioty[wybor]['ilosc'] > 0:
					if wybor == (len(self.przedmioty)-1):
						print 'nie mozesz walczyc mikstura'
					else:	
						self.zmiana_broni(self.przedmioty[wybor]['klasa']())
						self.zabierz_przedmiot(wybor)
						break
			except(ValueError, IndexError):
				print 'wybierz jedna z dostepnych mozliwosci'
			
	def opis(self):
		return '[%s, pz: %d, bron: %s, zloto: %s]' % (self.nazwa, self.pz, self.bron.nazwa('mianownik'), self.zloto)
		
	def uzycie_mikstury(self):
		if self.przedmioty[-1]['ilosc'] > 0:
			self.przedmioty[-1]['ilosc'] = self.przedmioty[-1]['ilosc']- 1
			self.dodaj_pz(10)
			print 'wypiles miksture leczenia, Twoje pz zwiekszyly sie o 10, masz ich aktualnie %d, liczba poozstalych mikstur: %d' % (self.pz, self.przedmioty[-1]['ilosc'])
		else:
			print 'brak mikstury leczenia'
			
class Postac(Istota):
	def __init__(self, imie):
		super(Postac, self).__init__(
			nazwa = imie,
			sila = 2,
			pz = 40 + randint(10,15),
			bron = Palka(),
			zloto = 50 + randint(25,50),
			pancerz = 1
			)

gracz = Postac('Rysiu')	

class Potwor(Istota):
	def losuj_ekwipunek(self, ekw1, ekw2):
		losuj = randint(ekw1, ekw2)
		self.zmiana_broni(self.przedmioty[losuj]['klasa']())
		self.dodaj_przedmiot(losuj)
		
class Legowisko():
	def __init__(self):
		self.nazwa = 'Legowisko Smoka'
	def wejscie(self):
		os.system('clear')
		print 'opis legowiska'
			
class Ork(Potwor):
	def __init__(self):
		super(Ork, self).__init__(
		nazwa = u'Ork', 
		sila = 4,
		pz = 20 + randint(1,10),
		bron = Palka(),
		zloto = 20 + randint(1,30),
		pancerz = 2,
		)
		self.losuj_ekwipunek(0,4)
		
class PoteznyOrk(Ork):
	def __init__(self):
		super(PoteznyOrk,self).__init__()
		self.nazwa = 'Potezny Ork'
		self.bron = Palka()
		self.pz = 40
		self.zloto = 40 + randint(1,10)
		self.losuj_ekwipunek(0,4)
				
class Goblin(Potwor):
	def __init__(self):
		super(Goblin, self).__init__(
		nazwa = u'Goblin', 
		sila = 2,
		pz = 10 + randint(1,5),
		bron = Palka(),
		zloto = 10 + randint(1,10),
		pancerz = 0
		)
		self.losuj_ekwipunek(0,1)
			
class PoteznyGoblin(Goblin):
	def __init__(self):
		super(PoteznyGoblin, self).__init__()
		self.nazwa = u'Potezny Goblin'
		self.sila = 3
		self.pz = 15 + randint(1,10)
		self.zloto = 20 + randint(1,10)
		
class Wilk(Potwor):
	def __init__(self):
		super(Wilk, self).__init__(
		nazwa = 'Wilk',
		sila = 3,
		pz = 15 + randint(1,10),
		bron = Szczeki(),
		zloto = 10 + randint(1,20),
		pancerz = 0,
		)

class WscieklyWilk(Wilk):
	def __init__(self):
		super(WscieklyWilk, self).__init__()
		self.nazwa = 'Zajadly Toczacy Sline Wielki Wsciekly Wilk'
		self.sila = 6
		self.pz = 40 + randint(10,20)
		self.zloto = 30 + randint(10,30)
		
class Ogr(Potwor):
	def __init__(self):
		super(Ogr, self).__init__(
		nazwa = 'Ogr',
		sila = 5,
		pz = 50,
		bron = Palka(),
		zloto = 40 + randint(1,30),
		pancerz = 3
		)
		self.losuj_ekwipunek(2,7)

class CzarnyRycerz(Potwor):
	def __init__(self):
		super(CzarnyRycerz, self).__init__(
		nazwa = 'Czarny Rycerz',
		sila = 4,
		pz = 50,
		bron = Palka(),
		zloto = 40 + randint(1,30),
		pancerz = 4
		)
		self.losuj_ekwipunek(2,7)		
		
class WielkiPajak(Potwor):
	def __init__(self):
		
		super(WielkiPajak, self).__init__(
			nazwa = 'Wielki Pajak',
			sila = 6,
			pz = 50 + randint(10,30),
			bron = Szczeki(),
			zloto = randint(0,10),
			pancerz = 3,
			)

class Smok(Potwor):
	def __init__(self):
		super(Smok, self).__init__(
			nazwa = 'Smok',
			sila = 10,
			pz = 100,
			bron = Pazury(),
			zloto = 10,
			pancerz = 10,
			)
		
class Sekretnamisja(object):
	
	def __init__(self):
		self.nazwa = 'Serkretna'
	def wejscie(self):
		pass

class Wioska(object):
	def __init__(self):
		self.nazwa = 'wioska'
	def wejscie(self, gracz):
		print 'opis wioski'
		print 'czy chcesz zmienic swoj ekwipunek [tak/nie] ?'
		wybor = raw_input('> ')
		if wybor == 'tak':
			gracz.pobranie_broni_z_ekwipunku()
					
class Sklep(Kontener):
    def __init__(self):
		super(Sklep, self).__init__(
			iloscsztuk = 5,
			mnoznik_handlarza = 1,	
		)
		self.nazwa = 'sklep'
		self.zloto = 100000
    def wejscie(self, klient):
		print 'chcesz cos kupic[0] czy sprzedac[1]'
		wybor = raw_input('> ')
		if wybor == '0':
			print 'wybierz co chcesz kupic'
			self.wymiana(self, klient)
		elif wybor == '1':
			print 'wybierz co chcesz sprzedac'
			self.wymiana(klient, self)
		
class Trening(object):
	def __init__(self):
		self.nazwa = 'sala treningowa'	
	def wejscie(self, trenujacy):
		print u'o ile chcesz zwiekszyc sile? [1pkt sily za 150 zlota]'
		wybor = raw_input('> ')
		if trenujacy.czy_stac(wybor*150):
			trenujacy.sila = trenujacy.sila + wybor
						
class Las(object):
	def __init__(self):
		self.nazwa = 'las'
	def wejscie(self, gracz):
		print 'to jest las'

class Wieza(object):
	def __init__(self):
		self.nazwa = 'wieza'
	def wejscie(self, gracz):
		print 'to jest wieza'
			
class Rzeka(object):
	def __init__(self):
		self.nazwa = 'rzeka'
	def wejscie(self, gracz):
		print 'a to rzeka'
	
class GeneratorWrogow(object):
	wrogowie = [
				dict(
					potwor = Goblin,
					szansa = 20,
					),
				dict(
					potwor = Wilk,
					szansa = 10,
					),	
				dict(
					potwor = Ork,
					szansa = 7,
					),
				dict(
					potwor = PoteznyGoblin,
					szansa = 7,
					),
				dict(
					potwor = PoteznyOrk,
					szansa = 5,
					),
						
				dict(
					potwor = WscieklyWilk,
					szansa = 4,
					),
				dict(
					potwor = WielkiPajak,
					szansa = 3,
					),
				dict(
					potwor = Ogr,
					szansa = 3,
					),
				dict(
					potwor = CzarnyRycerz,
					szansa = 3,
					),
							
					]

	def __init__(self):
		self.szansa = []
		for index, potwor in enumerate(self.wrogowie):
			self.szansa.extend([index] * potwor['szansa'])
		self.poziom = 0
		
	def trudnosc(self, ile):
		self.poziom = self.poziom + ile
		
	def losowanie(self):
		wylosowany = sample(self.szansa, 1)[0]
		wylosowany = wylosowany + self.poziom
		if wylosowany > len(self.wrogowie) - 1:
			wylosowany = len(self.wrogowie) - 1
		klasa_wylooswanego = self.wrogowie[wylosowany]['potwor']
		return klasa_wylooswanego() 

class Walka(object):

	def __init__(self, gracz, wrog):
		self.gracz = gracz
		self.wrog = wrog
		
	def atak(self, atakujacy, atakowany):
		obrazenia = atakujacy.bron.wylicz_obrazenia(atakujacy, atakowany)
		if obrazenia > 0:
			atakowany.odejmij_pz(obrazenia)
			print '%s zadaje %s obrazenia %d ' % (atakujacy.nazwa, atakujacy.bron.nazwa('narzednik'), obrazenia)
		else:
			print 'atak %s nie zadal zadnych obrazen' % atakujacy.nazwa
		raw_input('[enter]')
		
	def silnik_walki(self):
		istota1 = self.gracz
		istota2 = self.wrog
		
		inicjatywa1 = randint(1,1000)
		inicjatywa2 = randint(1,1000)
		if inicjatywa2 > inicjatywa1:
			istota1, istota2 = istota2, istota1
		sila_gracza_bezmodyf, pancerz_gracz_bezmodyf = gracz.sila, gracz.pancerz
		
		while istota1.czy_zyje() and istota2.czy_zyje():
			os.system('clear')
			print 'naprzeciw sobie staja', istota1.opis(), 'oraz: ', istota2.opis()
			print '1. Agresywny tryb walki [atak+50%, obrona-50%] '
			print '2. Defensywny tryb walki [atak-50%, obrona+50%] '
			print '3. Normalny tryb walki'
			print '4. Pije miksture leczenia'
			print '5. Uciekam'
			wybor = raw_input('> ')
			if wybor == '1':
				gracz.sila, gracz.pancerz = gracz.sila*1.5, gracz.pancerz*0.5
				print 'sila gracza', gracz.sila, 'pancerz gracza', gracz.pancerz
			elif wybor == '2':
				gracz.sila, gracz.pancerz = gracz.sila*0.5, gracz.pancerz*1.5
				print 'sila gracza', gracz.sila, 'pancerz gracza', gracz.pancerz
			elif wybor == '4':
				gracz.uzycie_mikstury()
				raw_input('>')
				
			elif wybor == '5':
				print 'tchorzliwie uciekasz z pola walki, najwyrazniej %s to zbyt potezny przeciwnik dla Ciebie' % self.wrog.nazwa
				raw_input('[enter]')	
				return 'ucieczka'
			self.atak(istota1, istota2)
			if istota2.czy_zyje():
				self.atak(istota2, istota1)
			gracz.sila, gracz.pancerz = sila_gracza_bezmodyf, pancerz_gracz_bezmodyf 
		if gracz.czy_zyje():
			print 'gratulacje martwy %s lezy u Twych stop, zdobyles po pokonanym wrogu %s sztuk zlota' % (self.wrog.nazwa, self.wrog.zloto)
			raw_input('[enter]')
			gracz.zarobki(self.wrog.zloto)
			
			gracz.ograb(gracz, self.wrog)
			return 'wygrana'
		else:
			print 'umarles'
			exit(1)	
		
class Silnik(object):
	# ladna nazwa lokacji powinna wynikac z metody klasy do ktorej sie odwolujemy
	mapa = [
		dict(
			lokacja = Wioska(),
			opcja = [Sklep(), Trening(), Las()]
		),
		dict(
			lokacja = Sklep(),
			opcja = [Wioska()],
		),
		dict(
			lokacja = Trening(),
			opcja = [Wioska()],
		),
		dict(
			lokacja = Las(),
			opcja = [Wioska(), Rzeka()],
		),
		dict(
			lokacja = Rzeka(),
			opcja = [Las(),Wieza(),Wioska()],
		),
		dict(
			lokacja = Sekretnamisja(),
			opcja = [Las()],
		),
		dict(
			lokacja = Wieza(),
			opcja = [Las(),Wieza()],
		),
		dict(
			lokacja = Legowisko(),
		
		),
	
	]	
		
	def __init__(self):
		self.wygrane_walki = 0
		self.obecnalokacja = self.mapa[0]['lokacja']
		self.lista_z_lokacjami = []
		for index in range(0, len(self.mapa)):
			lokacja = self.mapa[index]['lokacja']
			self.lista_z_lokacjami.append(lokacja.nazwa)
			
	def sprawdzenie_dostepnosci_lokacji(self):
		nr_lokacji = self.lista_z_lokacjami.index(self.obecnalokacja.nazwa)
		while True:
			try:
				print 'wybierz miejsce gdzie chcesz sie przemiescic'
				for nr_opcji in range(0, len(self.mapa[nr_lokacji]['opcja'])):
					opcja = self.mapa[nr_lokacji]['opcja'][nr_opcji]
					print '%d. %s' % (nr_opcji, opcja.nazwa)
				wybor = int(raw_input('wybierz lokacje > '))
				return self.mapa[nr_lokacji]['opcja'][wybor]
				break
			except (ValueError, IndexError):
				print 'wybierz jedna z dostepnych opcji'
		
			 
			
			
	def gra(self):
		
		self.obecnalokacja.wejscie(gracz)
		while self.obecnalokacja != self.mapa[-1]['lokacja']:
			print gracz.opis(), 'wygrane walki: ', self.wygrane_walki
			self.obecnalokacja = self.sprawdzenie_dostepnosci_lokacji()
			if self.obecnalokacja.nazwa == 'wioska' or self.obecnalokacja.nazwa == 'sklep' or self.obecnalokacja.nazwa == 'sala treningowa':
				self.obecnalokacja.wejscie(gracz)
			else:	
				generowanie_przeciwnika = GeneratorWrogow()
				generowanie_przeciwnika.trudnosc(self.wygrane_walki)
				wrog = generowanie_przeciwnika.losowanie()
				walka = Walka(gracz, wrog)
				wynik = walka.silnik_walki()
				if wynik == 'wygrana':
					self.wygrane_walki +=1
				self.obecnalokacja.wejscie(gracz)	
		
	

gra = Silnik()

gra.gra()

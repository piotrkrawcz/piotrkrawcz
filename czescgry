from random import randint, sample
import os

class Wydruki(object):
	# tu przeniose wszystkie printy w miare pisania gry
	pass

class Bron(object):
	def __init__(self):
	
		self.przypadek = dict (
					mianownik = '....',
					dopelniacz = '....',
					narzednik = ' .... ',
					)

	def nazwa(self, odmiana):
		return self.przypadek[odmiana]
	def wylicz_obrazenia(self, atakujacy, atakowany):
		return (atakujacy.sila + randint(self.obr_min, self.obr_max)) - self.mnoznik*atakowany.pancerz
	
class Miecz(Bron):
	przypadek = dict (
		mianownik = 'miecz',
		dopelniacz = 'miecza',
		narzednik = 'mieczem',
	)
	obr_min = 2
	obr_max = 6
	mnoznik = 0.5
	
class DobryMiecz(Miecz):
	obr_min = 4,
	obr_max = 8, 
	mnoznik = 0.5
	
class Szczeki(Bron):
	przypadek = dict(
			mianownik = 'szczeka',
			dopelniacz = 'szczek',
			narzednik = 'szczeka',
			),
	obr_min = 1
	obr_max = 9
	mnoznik = 1
					
class MlotBojowy(Bron):
	przypadek = dict (
		mianownik = 'miecz',
		dopelniacz = 'miecza',
		narzednik = 'mieczem',
	)
	obr_min = 3
	obr_max = 5
	mnoznik = 0.5
		
class DobryMlotBojowy(MlotBojowy):
	obr_min = 4,
	mnoznik = 0
				
class Topor(Bron):
	przypadek = dict (
			mianownik = 'topor',
			dopelniacz = 'topora',
			narzednik = 'toporem',
			)
	obr_min = 1, 
	obr_max = 7, 
	mnoznik = 0.5
		
class DobryTopor(Topor):
	obr_min = 1, 
	obr_max = 9, 
	mnoznik = 0.2
	
class Palka(Bron):
	przypadek = dict (
		mianownik = 'palka',
		dopelniacz = 'palki',
		narzednik = 'palka',
		)	
	obr_min = 1, 
	obr_max = 4, 
	mnoznik = 1.5

class Pazury(Bron):
	przypadek = dict(
			mianownik = 'pazury',
			dopelniacz = u'pazurow',
			narzednik = 'pazurami',
		),
	obr_min = 10
	obr_max = 25
	mnoznik = 1	
	
class Istota(object):
	def __init__(self, nazwa, sila, pz, bron, zloto, pancerz):
		self.nazwa = nazwa
		self.sila = sila
		self.pz = pz
		self.bron = bron
		self.zloto = zloto
		self.pancerz = pancerz
		
	def dodaj_pz(self, zmiana_pz):
		self.pz = self.pz + zmiana_pz
	def odejmij_pz(self, zmiana_pz):
		self.pz = self.pz - zmiana_pz
	def czy_zyje(self):
		return self.pz >= 0
		
	def zmiana_broni(self, bron):
		self.bron = bron
	
	def zarobki(self, dodaj_zloto):
		self.zloto = self.zloto + dodaj_zloto
		
	def wydatki(self, odejmij_zloto):
		self.zloto = self.zloto - odejmij_zloto
	
	def czy_stac(self, kwota_wydatku):
		return self.zloto >= kwota_wydatku
	
	def opis(self):
		return self.nazwa, self.pz, self.bron.nazwa('mianownik'), self.zloto
		
	def zakup_mikstury(self):
		self.mikstura = self.mikstura + 1
		
	def uzycie_mikstury(self):
		self.mikstura = self.mikstura - 1
		self.dodaj_pz(10)
		print 'wypiles miksture leczenia, Twoje pz zwiekszyly sie o 10, masz ich aktualnie %d, liczba poozstalych mikstur: %d' % (self.pz, self.mikstura)
	
class Postac(Istota):
	def __init__(self, imie):
		super(Postac, self).__init__(
			nazwa = imie,
			sila = 2,
			pz = 40 + randint(10,15),
			bron = Palka(),
			zloto = 50 + randint(25,50),
			pancerz = 1
			)
			
class Potwor(Istota):
	pass
		
class Legowisko():
	def wejscie(self):
		os.system('clear')
		print 'przed toba wielka zielonoluska bestia'
		print 'paszcze ma wielkosci konia'
		print 'a zeby wielkie i ostre, chca cie pozrec'
		print 'nie ma stad gdzie uciec, wiec jedyne co pozostaje to walka'
		raw_input('[enter]')
		while True:
			final = Walka()
			wynik = final.pojedynek()
			if wynik == 'wygrana':
				print 'pokonales bestie stanowiaca zagrozenie dla'
				print 'wioski - zostales jej bohaterem'
				exit(1)
			else:
				print 'ucieczka nie jest realna'
				print 'musisz ponownie przystapic do walki'
				raw_input('[enter]')
			
class Ork(Potwor):
	def __init__(self):
		super(Ork, self).__init__(
		nazwa = u'Ork', 
		sila = 4,
		pz = 20 + randint(1,10),
		bron = Palka(),
		zloto = 20 + randint(1,30),
		pancerz = 3,
		)
		
class PoteznyOrk(Ork):
	def __init__(self):
		super(PoteznyOrk,self).__init__()
		self.nazwa = 'Potezny Ork'
		self.bron = DobryTopor()
		self.pz = 40
		self.zloto = 40 + randint(1,10)
				
class Goblin(Potwor):
	def __init__(self):
		super(Goblin, self).__init__(
		nazwa = u'Goblin', 
		sila = 2,
		pz = 10 + randint(1,5),
		bron = Palka(),
		zloto = 10 + randint(1,10),
		pancerz = 0
		)
		
class PoteznyGoblin(Goblin):
	def __init__(self):
		super(PoteznyGoblin, self).__init__()
		self.nazwa = u'Potezny Goblin'
		self.sila = 3
		self.pz = 15 + randint(1,10)
		self.zloto = 20 + randint(1,10)
		
class Wilk(Potwor):
	def __init__(self):
		super(Wilk, self).__init__(
		nazwa = 'Wilk',
		sila = 3,
		pz = 15 + randint(1,10),
		bron = Szczeki(),
		zloto = 10 +randint(1,20),
		pancerz = 0,
		)

class WscieklyWilk(Wilk):
	def __init__(self):
		super(WscieklyWilk, self).__init__()
		self.nazwa = 'Zajadly Toczacy Sline Wielki Wsciekly Wilk'
		self.sila = 6
		self.pz = 40 + randint(10,20)
		self.zloto = 30 + randint(10,30)
		
class WielkiPajak(Potwor):
	def __init__(self):
		
		super(WielkiPajak, self).__init__(
			nazwa = 'Wielki Pajak',
			sila = 6,
			pz = 50 + randint(10,30),
			bron = Szczeki(),
			zloto = randint(0,10),
			pancerz = 3,
			)

class Smok(Potwor):
	def __init__(self):
		super(Smok, self).__init__(
			nazwa = 'Smok',
			sila = 10,
			pz = 100,
			bron = Pazury(),
			zloto = 10,
			pancerz = 10,
			)
		
class Sekretnamisja(object):
	
	def wejscie(self):
		gracz.sekretnamisja('zaliczenie')
		print 'wchodzac do wioski podchodzi do Ciebie stary dziad i mowi:'
		print 'dobry Panie slyszalem zescie bohatery potezne sa'
		print 'moze pomoglibyscie staremu dziadowi odgonic wstretnego pajaka'
		print 'ktory zagniezdzil sie pod moim domem, obiecuje nagrode godna bohatera'
		print '1. dobrze zaprowadz mnie tam'
		print '2. spieprzaj dziadu'
		wybor = raw_input('> ')
		if wybor == '1':
			print 'zgodziles sie pomoc dziadowi w oczyszczeniu domu z robactwa'
			print 'dziad prowadzil cie przez krete sciezki lesne'
			print 'co chwile skrecajac w prawo i lewo'
			print 'nie masz pojecia gdzie sie teraz znajdujesz'
			raw_input('[enter]')
			print 'z oddali poslyszales przerazliwy syk'
			print 'nie trzeba bylo dlugo czekac a zlokalziowales zrodlo tego syku'
			print 'gigantyczny pajak rzucil sie na Ciebie a dziad uciekl'
			print 'do lasu'
			print 'musisz walczyc'
			raw_input('[enter]')
			atak = Walka('spiderman')
			wynik = atak.pojedynek()
			if wynik == 'wygrana':
				os.system('clear')
				print 'po ciezkiej walce udaje ci sie powalic pajaka'
				print 'dziada nigdzie nie ma, ale odnajdujesz skrzynie'
				print 'i ciekawie zagladasz do srodka'
				print 'okazuje sie ze znajduje sie tam piekna rusznica i sakwa wypelniona zlotem'
				print 'co robisz?'
				print '1. zabieram wszystko'
				print '2. zabieram rusznice'
				print '3. zabieram zloto'
				print '4. nie jestem zlodziejem zostawiam to wszystko na miejscu'
				wybor = raw_input('> ')
				if wybor == '1':
					print 'zabierasz bron i zloto'
					print 'nie majac wiecej do roboty wracasz przez las do wioski'
					gracz.zarobki(500)
					gracz.zmiana_broni(Rusznica())
			
					return 'las'
				elif wybor == '2':
					print 'zabierasz bron '
					print 'nie majac wiecej do roboty wracasz przez las do wioski'
					gracz.zmiana_broni(Rusznica())
									
					return 'las'	
				elif wybor == '3':
					print 'zabierasz zloto'
					print 'nie majac wiecej do roboty wracasz przez las do wioski'
					gracz.zarobki(500)
					return 'las'
				else:
					print 'nie majac wiecej do roboty wracasz przez las do wioski'
					return 'las'
			else:
				print 'uciekales jak szalony od pajaka, ktory gonil Cie po calym lesie'
				print 'az w koncu dal sobie spokoj'
				print 'wokol ciebie pelno drzew'
				raw_input('[enter]')
				return 'las'
		
		
		
		else:
			print 'czujesz ze straciles szanse swego zycia w tej wiosce'
			print 'dziad byl godny zaufania i na pewno mial dobra nagrode'
			raw_input('[enter]')
			return 'wioska'
			
	def wykonanie(self):
		return self.misja

class Wioska(object):
	# odwolanie do sklepu treningu lasu 'krupiera'
	def wejscie(self):
		print 'opis wioski'
		wybor = raw_input('[sklep / trening / las / krupier] ')
		return wybor
class Sklep(object):
    def __init__(self):
		self.przedmioty = [
			dict(
				klasa = Miecz,
				towar = 'Miecz',
				cena = 50,
			),
			dict(
				klasa = MlotBojowy,
				towar = 'Mlot Bojowy',
				cena = 50,
			),
			dict(
				klasa = Topor,
				towar = 'Topor',
				cena = 60,
			),
			dict(
				klasa = DobryMiecz,
				towar = 'Dobry Miecz',
				cena = 200,
			),
			dict(
				klasa = DobryMlotBojowy,
				towar = 'Dobry Mlot Bojowy',
				cena = 200,
			),
			dict(
				klasa = DobryTopor,
				towar = 'Dobry Topor',
				cena = 220,
			),
			dict(
				klasa = Mikstura,
				towar = 'mikstura',
				cena = 75,
			),
		
		]
		self.lista_przedmiotow = []
		for index, pozycja in enumerate(self.przedmioty):
			self.lista_przedmiotow.append(index)
	
    def wejscie(self, kupujacy):
		os.system('clear')
		print 'ponizej lista towarow do zakupu'
		for nr_przedmiotu in range(0, len(self.przedmioty)):
			print '%d. towar: %s, cena: %s' %(nr_przedmiotu, self.przedmioty[nr_przedmiotu]['towar'], self.przedmioty[nr_przedmiotu]['cena'])
		wybor = raw_input('> ')
		if wybor in range(0, len(self.przedmioty)) and kupujacy.czy_stac(self.przedmioty[wybor]['cena']):
			kupujacy.zmiana_broni(self.przedmioty[wybor]['klasa'])
			kupujacy.wydatki(self.przedmioty[wybor]['cena'])
							
class Trening(object):
		
	def wejscie(self, trenujacy):
		print u'o ile chcesz zwiekszyc sile? [1pkt sily za 150 zlota]'
		wybor = raw_input('> ')
		if trenujacy.czy_stac(wybor*150):
			trenujacy.sila = trenujacy.sila + wybor
						
class Las(object):
	pass

class Wieza(object):
	pass
	# w wiezy trzeba zabic 3 potwory aby dostac sie do legowiska smoka
			
class Rzeka(object):
	pass
	
		
class Silnik(object):
	# ladna nazwa lokacji powinna wynikac z metody klasy do ktorej sie odwolujemy
	mapa = [
		dict(
			lokacja = Wioska(),
		
		),
		dict(
			lokacja = Sklep(),
		
		),
		dict(
			lokacja = Trening(),
		
		),
		dict(
			lokacja = Las(),
		
		),
		dict(
			lokacja = Rzeka(),
		
		),
		dict(
			lokacja = Sekretnamisja(),
		
		),
		dict(
			lokacja = Wieza(),
		
		),
		dict(
			lokacja = Legowisko(),
		
		),
	
	]	
		
	def __init__(self):
		self.dostepnosc_lokacji = 4
		self.obecnalokacja = self.mapa[0]['lokacja']
		
	def sprawdzenie_dostepnosci_lokacji(self):
		for nr_lokacji in range (0,self.dostepnosc_lokacji):
			print u'dostepny cel podrozy: %s' % self.mapa[nr_lokacji]['lokacja']	
		wybor = raw_input('wybierz lokacje> ')
		wybor = int(wybor)
		return (self.mapa[wybor]['lokacja']())
			
	def gra(self):		
		while self.obecnalokacja == self.mapa[-3]['lokacja']:
			pass
		
	

class GeneratorWrogow(object):
	wrogowie = [
				dict(
					potwor = Goblin,
					szansa = 5,
					),
				dict(
					potwor = Wilk,
					szansa = 20,
					),	
				dict(
					potwor = Ork,
					szansa = 0,
					),
				dict(
					potwor = PoteznyGoblin,
					szansa = 1,
					),
				dict(
					potwor = WscieklyWilk,
					szansa = 1,
					),
						
					]

	def __init__(self):
		self.szansa = []
		for index, potwor in enumerate(self.wrogowie):
			self.szansa.extend([index] * potwor['szansa'])
		self.poziom = 0
		
	def trudnosc(self, ile):
		self.poziom = self.poziom + ile
		
	def losowanie(self):
		wylosowany = sample(self.szansa, 1)[0]
		wylosowany = wylosowany + self.poziom
		if wylosowany > len(self.wrogowie) - 1:
			wylosowany = len(self.wrogowie) - 1
		klasa_wylooswanego = self.wrogowie[wylosowany]['potwor']
		self.trudnosc(1)
		return klasa_wylooswanego() 

class Walka(object):
	def __init__(self, specjalny):
		self.generowanie = GeneratorWrogow()
		self.wrog = self.generowanie.losowanie(gracz.poziom)
		
	def atak(self, atakujacy, atakowany):
		obrazenia = atakujacy.bron.wylicz_obrazenia(atakujacy, atakowany)
		if obrazenia > 0:
			atakowany.odejmij_pz(obrazenia)
			print '%s zadaje %s obrazenia %d ' % (atakujacy.nazwa, atakujacy.bron.nazwa('narzednik'), obrazenia)
		else:
			print 'atak %s nie zadal zadnych obrazen' % atakujacy.nazwa
		raw_input('[enter]')
		
	def silnik_walki(self, istota1, istota2):
		inicjatywa1 = randint(1,1000)
		inicjatywa2 = randint(1,1000)
		if inicjatywa2 > inicjatywa1:
			istota1, istota2 = istota2, istota1
		sila_gracza_bezmodyf, pancerz_gracz_bezmodyf = gracz.sila, gracz.pancerz
		
		while istota1.czy_zyje() and istota2.czy_zyje():
			os.system('clear')
			print 'przed Toba znajduje sie gotowy do walki %s, mozesz go zaatakowac uzywajac %s' % (self.wrog.nazwa, gracz.bron.nazwa('dopelniacz'))
			print '1. Agresywny tryb walki [atak+30%, obrona-50%] '
			print '2. Defensywny tryb walki [atak-20%, obrona+50%] '
			print '3. Normalny tryb walki'
			print '4. Pije miksture leczenia'
			print '5. Uciekam'
			wybor = raw_input('> ')
			if wybor == '1':
				gracz.sila, gracz.pancerz = gracz.sila*1.3, gracz.pancerz*0.5
			elif wybor == '2':
				gracz.sila, gracz.pancerz = gracz.sila*0.7, gracz.pancerz*1.5
			elif wybor == '4':
				if gracz.mikstura > 0:
					gracz.uzycie_mikstury()
					raw_input('>')
					
				else:
					print 'nie masz mikstury'
			elif wybor == '5':
				print 'tchorzliwie uciekasz z pola walki, najwyrazniej %s to zbyt potezny przeciwnik dla Ciebie' % self.wrog.nazwa
				raw_input('[enter]')	
				return 'ucieczka'
			self.atak(istota1, istota2)
			if istota2.czy_zyje():
				self.atak(istota2, istota1)
			gracz.sila, gracz.pancerz = sila_gracza_bezmodyf, pancerz_gracz_bezmodyf 
		if gracz.czy_zyje():
			print 'gratulacje martwy %s lezy u Twych stop, zdobyles po pokonanym wrogu %s sztuk zlota' % (self.wrog.nazwa, self.wrog.zloto)
			raw_input('[enter]')
			gracz.zarobki(self.wrog.zloto)
			gracz.trudnosc()
		else:
			print 'umarles'
			exit(1)
		return 'wygrana'	


gra = Silnik()
gra.sprawdzenie_dostepnosci_lokacji()

